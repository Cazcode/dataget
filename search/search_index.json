{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dataget \u00b6 Dataget is an easy to use, framework-agnostic, dataset library that gives you quick access to a collection of Machine Learning datasets through a simple API. Main features: Minimal : Downloads entire datasets with just 1 line of code. Compatible : Loads data as numpy arrays or pandas dataframes which can be easily used with the majority of Machine Learning frameworks. Transparent : By default stores the data in your current project so you can easily inspect it. Memory Efficient : When a dataset doesn't fit in memory it will return metadata instead so you can iteratively load it. Integrates with Kaggle : Supports loading datasets directly from Kaggle in a variety of formats. Checkout the documentation for the list of avaiable datasets. Getting Started \u00b6 In dataget you just have to do two things: Select a dataset from the data module. Use the get method to download the data to disk and load it into memory. import dataget as dg X_train , y_train , X_test , y_test = dg . data . vision . mnist () . get () This examples downloads the MNIST dataset to ./data/vision_mnist and loads it as numpy arrays. Kaggle Support \u00b6 Kaggle promotes the use of csv files and dataget loves it! With dataget you can quickly download any dataset from the platform and have immediate access to the data: import dataget as dg df_train , df_test = dg . data . kaggle ( \"cristiangarcia/pointcloudmnist2d\" ) . get ( files = [ \"train.csv\" , \"test.csv\" ] ) To start using Kaggle datasets just make sure you have properly installed and configured the Kaggle API . In the future we want to expand Kaggle support in the following ways: Be able to load any file that numpy or pandas can read. Have generic support for other types of datasets like images, audio, video, etc. e.g dg.data.kaggle(..., type=\"vision\").get(...) Installation \u00b6 dataget is avaiable at pypi so you can use your favorite package manager install to it: pip \u00b6 pip install dataget pipenv \u00b6 pipenv install pytest poetry \u00b6 poetry add dataget License \u00b6 MIT License","title":"Introduction"},{"location":"#dataget","text":"Dataget is an easy to use, framework-agnostic, dataset library that gives you quick access to a collection of Machine Learning datasets through a simple API. Main features: Minimal : Downloads entire datasets with just 1 line of code. Compatible : Loads data as numpy arrays or pandas dataframes which can be easily used with the majority of Machine Learning frameworks. Transparent : By default stores the data in your current project so you can easily inspect it. Memory Efficient : When a dataset doesn't fit in memory it will return metadata instead so you can iteratively load it. Integrates with Kaggle : Supports loading datasets directly from Kaggle in a variety of formats. Checkout the documentation for the list of avaiable datasets.","title":"Dataget"},{"location":"#getting-started","text":"In dataget you just have to do two things: Select a dataset from the data module. Use the get method to download the data to disk and load it into memory. import dataget as dg X_train , y_train , X_test , y_test = dg . data . vision . mnist () . get () This examples downloads the MNIST dataset to ./data/vision_mnist and loads it as numpy arrays.","title":"Getting Started"},{"location":"#kaggle-support","text":"Kaggle promotes the use of csv files and dataget loves it! With dataget you can quickly download any dataset from the platform and have immediate access to the data: import dataget as dg df_train , df_test = dg . data . kaggle ( \"cristiangarcia/pointcloudmnist2d\" ) . get ( files = [ \"train.csv\" , \"test.csv\" ] ) To start using Kaggle datasets just make sure you have properly installed and configured the Kaggle API . In the future we want to expand Kaggle support in the following ways: Be able to load any file that numpy or pandas can read. Have generic support for other types of datasets like images, audio, video, etc. e.g dg.data.kaggle(..., type=\"vision\").get(...)","title":"Kaggle Support"},{"location":"#installation","text":"dataget is avaiable at pypi so you can use your favorite package manager install to it:","title":"Installation"},{"location":"#pip","text":"pip install dataget","title":"pip"},{"location":"#pipenv","text":"pipenv install pytest","title":"pipenv"},{"location":"#poetry","text":"poetry add dataget","title":"poetry"},{"location":"#license","text":"MIT License","title":"License"},{"location":"api/","text":"Reference API \u00b6","title":"Reference API"},{"location":"api/#reference-api","text":"","title":"Reference API"},{"location":"dataset/","text":"Creating a Dataset \u00b6","title":"Creating a Dataset"},{"location":"dataset/#creating-a-dataset","text":"","title":"Creating a Dataset"},{"location":"datasets/kaggle/","text":"","title":"kaggle"},{"location":"datasets/vision/mnist/","text":"dg.vision.mnist \u00b6 Downloads the MNIST dataset from Yann LeCun's website and loads it as numpy arrays. import dataget as dg X_train , y_train , X_test , y_test = dg . vision . mnist () . get () Format \u00b6 type shape dtype X_train np.array (60000, 28, 28) uint8 y_train np.array (60000,) uint8 X_test np.array (10000, 28, 28) uint8 y_test np.array (10000,) uint8 Info \u00b6 Folder name : vision_mnist Size on disk : 53MB","title":"mnist"},{"location":"datasets/vision/mnist/#dgvisionmnist","text":"Downloads the MNIST dataset from Yann LeCun's website and loads it as numpy arrays. import dataget as dg X_train , y_train , X_test , y_test = dg . vision . mnist () . get ()","title":"dg.vision.mnist"},{"location":"datasets/vision/mnist/#format","text":"type shape dtype X_train np.array (60000, 28, 28) uint8 y_train np.array (60000,) uint8 X_test np.array (10000, 28, 28) uint8 y_test np.array (10000,) uint8","title":"Format"},{"location":"datasets/vision/mnist/#info","text":"Folder name : vision_mnist Size on disk : 53MB","title":"Info"}]}