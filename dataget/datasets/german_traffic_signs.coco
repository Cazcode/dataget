import urllib
import zipfile
import os
import shutil

from .base_dataset import DataSet, TrainingSet, TestSet
from . import DATASETS


TRAINING_SET_URL = "http://benchmark.ini.rub.de/Dataset/GTSRB_Final_Training_Images.zip"
TEST_SET_URL = "http://benchmark.ini.rub.de/Dataset/GTSRB_Final_Test_Images.zip"
TEST_CSV_URL = "http://benchmark.ini.rub.de/Dataset/GTSRB_Final_Test_GT.zip"


def get_progress():
    def progress(count, blockSize, totalSize):

        new = int( count * blockSize * 100 / totalSize )

        if new % 5 == 0 and new != progress.last:
            print("{}%".format(new))
            progress.last = new

    progress.last = -1

    return progress

class GermanTrafficSignsDataset(DataSet):

    @property
    def training_set_class(self):
        return TrainingGermanTrafficSignsDataset

    @property
    def test_set_class(self):
        return TestGermanTrafficSignsDataset

    @property
    def help(self):
        return "TODO"

    @property
    def name(self):
        return "German Traffic Signs Dataset"

    def _download(self, download, extract, keep_sources):
        training_images_path = os.path.join(self.training_set.path, "GTSRB/Final_Training/Images")
        test_images_path = os.path.join(self.test_set.path, "GTSRB/Final_Test/Images")

        if download:
            print("_downloading training-set.zip")
            testfile = urllib.URLopener()
            testfile.retrieve(TRAINING_SET_URL, self.training_set.path + ".zip", get_progress())

            print("_downloading test-set.zip")
            testfile = urllib.URLopener()
            testfile.retrieve(TEST_SET_URL, self.test_set.path + ".zip", get_progress())

            print("_downloading GT-final_test.csv.zip")
            testfile = urllib.URLopener()
            testfile.retrieve(TEST_CSV_URL, self.path + "/GT-final_test.csv.zip", get_progress())


        if extract:
            print("extracting training-set.zip")
            zip_ref = zipfile.ZipFile(self.training_set.path + ".zip", 'r')
            zip_ref.extractall(self.training_set.path)
            zip_ref.close()


            print("extracting test-set.zip")
            zip_ref = zipfile.ZipFile(self.test_set.path + ".zip", 'r')
            zip_ref.extractall(self.test_set.path)
            zip_ref.close()
            os.remove(self.test_set.path + "/GTSRB/Final_Test/Images/GT-final_test.test.csv")


            print("extracting GT-final_test.csv.zip")
            zip_ref = zipfile.ZipFile(self.path + "/GT-final_test.csv.zip", 'r')
            zip_ref.extract("GT-final_test.csv", self.test_set.path + "/GTSRB/Final_Test/Images")
            zip_ref.close()

            print("organizing files")
            for dir in os.listdir(training_images_path):
                old_dir = os.path.join(training_images_path, dir)
                new_dir = os.path.join(self.training_set.path, dir)

                os.rename(old_dir, new_dir)

            for dir in os.listdir(test_images_path):
                old_dir = os.path.join(test_images_path, dir)
                new_dir = os.path.join(self.test_set.path, dir)

                os.rename(old_dir, new_dir)

            #training images readme
            old_dir = os.path.join(self.training_set.path, "GTSRB/Readme-Images.txt")
            new_dir = os.path.join(self.training_set.path, "Readme-Images.txt")
            os.rename(old_dir, new_dir)
            os.path.join(self.training_set.path, "GTSRB") |> shutil.rmtree

            #training images readme
            old_dir = os.path.join(self.test_set.path, "GTSRB/Readme-Images-Final-test.txt")
            new_dir = os.path.join(self.test_set.path, "Readme-Images.txt")
            os.rename(old_dir, new_dir)
            os.path.join(self.test_set.path, "GTSRB") |> shutil.rmtree


        if not keep_sources:
            print("removing sources")
            os.remove(self.training_set.path + ".zip")
            os.remove(self.test_set.path + ".zip")
            os.remove(self.path + "/GT-final_test.csv.zip")


        print("DONE")

    def _process(self, dims="32x32"):
        import os, sys
        from PIL import Image

        dims = dims.split('x')
        dims = tuple(map(int, dims))

        print("Image dims: {}".format(dims))

        CLASS = None

        for root, dirs, files in os.walk(self.path):
            for file in files:
                file = os.path.join(root, file)

                if file.endswith(".ppm"):

                    jpg_file = file.replace(".ppm", ".jpg")

                    with Image.open(file) as im:
                        im = im.resize(dims)
                        im.save(jpg_file, quality=100)

                    os.remove(file)

                    dirs = file.split("/")
                    _class = dirs[-2]

                    if _class != CLASS:
                        CLASS = _class

                        print("formating {_class}".format(_class = _class))

                elif file.endswith(".csv"):

                    with open(file, 'r') as f:
                        csv = f.read()

                    csv = csv.replace(".ppm", ".jpg")

                    with open(file, 'w') as f:
                        f.write(csv)



class SetsBase(object):

    def arrays(self):
        import numpy as np

        data = self.dataframe()

        features = np.stack(data.Image.as_matrix())
        labels = np.stack(data.ClassId.as_matrix())

        return features, labels


    def random_batch_dataframe_generator(self, batch_size):
        data = self.dataframe()

        while True:
            yield data.sample(batch_size)


    def random_batch_arrays_generator(self, batch_size):
        import numpy as np

        for data in self.random_batch_dataframe_generator(batch_size):

            features = np.stack(data.Image.as_matrix())
            labels = np.stack(data.ClassId.as_matrix())

            yield features, labels


class TestGermanTrafficSignsDataset(SetsBase, TestSet):

    def dataframe(self):
        if not hasattr(self, '_data'):
            import pandas as pd

            csv_path = os.path.join(self.path, "GT-final_test.csv")

            df = pd.read_csv(csv_path, sep=";")
            df['Filename'] = self.path + "/" + df['Filename']

            self._data = df

        return self._data


class TrainingGermanTrafficSignsDataset(SetsBase, TrainingSet):

    def _dataframe_generator(self):
        import pandas as pd

        for cls_string in os.listdir(self.path):
            if os.path.join(self.path, cls_string) |> os.path.isdir:
                csv_path = "{0}/GT-{0}.csv".format(cls_string) |> os.path.join$(self.path)

                df = pd.read_csv(csv_path, sep=";")
                df['Filename'] = os.path.join(self.path, cls_string) + "/" + df['Filename']

                yield df

    def dataframe(self):
        if not hasattr(self, '_data'):
            from scipy.misc import imread
            import pandas as pd

            data = pd.concat(self._dataframe_generator())
            data["Image"] = data.Filename.apply(imread)

            self._data = data

        return self._data




DATASETS.update({"german-traffic-signs": GermanTrafficSignsDataset})
