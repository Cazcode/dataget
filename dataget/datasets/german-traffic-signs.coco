import urllib
import zipfile
import os
import shutil
from dataget.utils import get_file
from dataget.dataset import ImageDataSetWithMetadata
from dataget.api import register_dataset
from multiprocessing import Pool

TRAINING_SET_URL = "http://benchmark.ini.rub.de/Dataset/GTSRB_Final_Training_Images.zip"
TEST_SET_URL = "http://benchmark.ini.rub.de/Dataset/GTSRB_Final_Test_Images.zip"
TEST_CSV_URL = "http://benchmark.ini.rub.de/Dataset/GTSRB_Final_Test_GT.zip"

@register_dataset
class GermanTrafficSigns(ImageDataSetWithMetadata):

    def __init__(self, *args, **kwargs):
        super(GermanTrafficSigns, self).__init__(*args, **kwargs)

        self._training_images_path = os.path.join(self.training_set.path, "GTSRB/Final_Training/Images")
        self._test_images_path = os.path.join(self.test_set.path, "GTSRB/Final_Test/Images")


    @property
    def _raw_extension(self):
        return "ppm"

    @property
    def help(self):
        return "TODO"

    def reqs(self, **kwargs):
        return super(GermanTrafficSigns, self).reqs() + ""


    def _download(self, **kwargs):
        pool = Pool()

        pool.apply_async(get_file, (TEST_CSV_URL, self.path, "GT-final_test.csv.zip"))
        pool.apply_async(get_file, (TRAINING_SET_URL, self.path, "training-set.zip"))
        pool.apply_async(get_file, (TEST_SET_URL, self.path, "test-set.zip"))

        pool.close()
        pool.join()


    def _extract_training_set(self, **kwargs):

        with zipfile.ZipFile(os.path.join(self.path, "training-set.zip"), 'r') as zip_ref:
            for file in zip_ref.namelist():
                # skip directories
                if not os.path.basename(file):


                    if file.endswith(".csv") or file.endswith(self.raw_extension):
                        structure = file |> .split("/")
                        filename = structure[-1]
                        class_id = dirs[-2] |> int |> str
                        path = os.path.join(self.training_set.path, class_id, filename)

                    if file.endswith(".csv"):
                        filename = "{}.csv".format(class_id)


                    # copy file (taken from zipfile's extract)
                    source = zip_ref.open(file)
                    target = open(os.path.join(self.path, file), "wb")

                    with source, target:
                        shutil.copyfileobj(source, target)


    def _extract_test_set(self, **kwargs):
        pass


    def _extract(self, **kwargs):
        self._extract_training_set(**kwargs)


        #############
        #### OLD ####
        #############
        # print("extracting training-set.zip")
        # zip_ref = zipfile.ZipFile(self.training_set.path + ".zip", 'r')
        # zip_ref.extractall(self.training_set.path)
        # zip_ref.close()
        #
        #
        # print("extracting test-set.zip")
        # zip_ref = zipfile.ZipFile(self.test_set.path + ".zip", 'r')
        # zip_ref.extractall(self.test_set.path)
        # zip_ref.close()
        # os.remove(self.test_set.path + "/GTSRB/Final_Test/Images/GT-final_test.test.csv")
        #
        #
        # print("extracting GT-final_test.csv.zip")
        # zip_ref = zipfile.ZipFile(self.path + "/GT-final_test.csv.zip", 'r')
        # zip_ref.extract("GT-final_test.csv", self.test_set.path + "/GTSRB/Final_Test/Images")
        # zip_ref.close()
        #
        # print("organizing files")
        # for dir in os.listdir(self._training_images_path):
        #     old_dir = os.path.join(self._training_images_path, dir)
        #     new_dir = os.path.join(self.training_set.path, dir)
        #
        #     os.rename(old_dir, new_dir)
        #
        # for dir in os.listdir(self._test_images_path):
        #     old_dir = os.path.join(self._test_images_path, dir)
        #     new_dir = os.path.join(self.test_set.path, dir)
        #
        #     os.rename(old_dir, new_dir)
        #
        # #training images readme
        # old_dir = os.path.join(self.training_set.path, "GTSRB/Readme-Images.txt")
        # new_dir = os.path.join(self.training_set.path, "Readme-Images.txt")
        # os.rename(old_dir, new_dir)
        # os.path.join(self.training_set.path, "GTSRB") |> shutil.rmtree
        #
        # #training images readme
        # old_dir = os.path.join(self.test_set.path, "GTSRB/Readme-Images-Final-test.txt")
        # new_dir = os.path.join(self.test_set.path, "Readme-Images.txt")
        # os.rename(old_dir, new_dir)
        # os.path.join(self.test_set.path, "GTSRB") |> shutil.rmtree

    def _process(self, dims="32x32", format="jpg", **kwargs):
        import os, sys
        from PIL import Image

        dims = dims.split('x')
        dims = tuple(map(int, dims))

        print("Image dims: {}, Image format: {}".format(dims, format))

        CLASS = None

        for root, dirs, files in os.walk(self.path):
            for file in files:
                file = os.path.join(root, file)

                if file.endswith(self.raw_extension):

                    new_file = file.replace(self.raw_extension, ".{}".format(format))

                    with Image.open(file) as im:
                        im = im.resize(dims)
                        im.save(new_file, quality=100)

                    dirs = file.split("/")
                    _class = dirs[-2]

                    if _class != CLASS:
                        CLASS = _class
                        print("formating {_class}".format(_class = _class))

                elif file.endswith(".csv"):
                    with open(file, 'r') as f:
                        csv = f.read()

                    csv = csv.replace(self.raw_extension, ".{}".format(format))

                    with open(file, 'w') as f:
                        f.write(csv)


    def process_dataframe(self, dataframe, **kwargs):
        pass
