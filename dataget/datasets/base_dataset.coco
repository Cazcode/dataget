import os
import shutil
from abc import ABCMeta
from abc import abstractmethod
from abc import abstractproperty

class DataSet(object):
    __metaclass__ = ABCMeta

    def __init__(self, name, home_path):
        self.path = os.path.join(home_path, name)
        self.training_set = self.training_set_class(self)
        self.test_set = self.test_set_class(self)


    def load(self, download=True, clear=False, keep_sources=False, extract=True, **kwargs):
        if clear:
            self.clear()

        if not os.path.exists(self.path):
            os.makedirs(self.path)

        self._load(download, extract, keep_sources, **kwargs)

        return self

    def load_once(self, *args, **kwargs):
        if not os.path.exists(self.path):
            self.load(*args, **kwargs)

        return self

    def download(self, **kwargs):
        return self.load(download=True, clear=False, keep_sources=True, extract=False)

    def extract(self):
        return self.load(download=False, clear=False, keep_sources=True, extract=True)

    def remove_sources(self):
        return self.load(download=False, clear=False, keep_sources=False, extract=False)

    def process(self, **kwargs):

        self._process(**kwargs)

        return self

    def clear(self):
        shutil.rmtree(self.path)

        return self


    @abstractproperty
    def training_set_class(self):
        pass

    @abstractproperty
    def test_set_class(self):
        pass

    @abstractproperty
    def help(self):
        pass

    @abstractproperty
    def name(self):
        pass

    @abstractmethod
    def _load(self):
        pass

    @abstractmethod
    def _process(self):
        pass



class TrainingSet(object):
    __metaclass__ = ABCMeta

    def __init__(self, dataset):
        self.dataset = dataset
        self.path = os.path.join(dataset.path, "training-set")

    @abstractmethod
    def dataframe(self):
        pass

    @abstractmethod
    def arrays(self):
        pass

    @abstractmethod
    def random_batch_dataframe_generator(self, batch_size):
        pass

    @abstractmethod
    def random_batch_arrays_generator(self, batch_size):
        pass

class TestSet(object):
    __metaclass__ = ABCMeta

    def __init__(self, dataset):
        self.dataset = dataset
        self.path = os.path.join(dataset.path, "test-set")

    @abstractmethod
    def dataframe(self):
        pass

    @abstractmethod
    def arrays(self):
        pass

    @abstractmethod
    def random_batch_dataframe_generator(self, batch_size):
        pass

    @abstractmethod
    def random_batch_arrays_generator(self, batch_size):
        pass
