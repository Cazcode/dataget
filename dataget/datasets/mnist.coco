from dataget.dataset import DataSet, TrainingSet, TestSet
from dataget.utils import get_file, maybe_mkdir
import gzip
import os

TRAIN_FEATURES_URL = "http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz"
TRAIN_LABELS_URL = "http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz"
TEST_FEATURES_URL = "http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz"
TEST_LABELS_URL = "http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz"

def ungzip(src_name, dest_name):
    print("extracting {}".format(dest_name))

    with gzip.open(src_name, 'rb') as infile:
        with open(dest_name, 'wb') as outfile:
            for line in infile:
                outfile.write(line)


def arrays_to_images(path, images, labels, dims, format):
    from PIL import Image

    last = -1
    n = len(labels)

    for i, (array_img, label) in (images, labels) |*> zip |> enumerate:

        label = str(label)
        class_path = os.path.join(path, label) |> maybe_mkdir

        with Image.fromarray(array_img) as im:
            im = im.resize(dims)
            im.save(
                os.path.join(
                    class_path,
                    "{}.{}".format(i, format)
                ),
                quality=100
            )

        percent = int(float(i + 1) / n * 100)
        if percent % 10 == 0 and percent != last:
            print("{}%".format(percent))
            last = percent


class MNIST(DataSet):

    def __init__(self, *args, **kwargs):
        super(MNIST, self).__init__(*args, **kwargs)

        # self.path
        # self.training_set
        # self.training_set.path
        # self.test_set
        # self.test_set.path


    @property
    def training_set_class(self):
        return MNISTTrainingSet

    @property
    def test_set_class(self):
        return MNISTTestSet

    @property
    def help(self):
        return "" # information for the help command

    def reqs(self, **kwargs):
        return "idx2numpy pillow" # e.g. "numpy pandas pillow"

    def _download(self, **kwargs):
        get_file(TRAIN_FEATURES_URL, self.path, "train-features.gz")
        get_file(TRAIN_LABELS_URL, self.path, "train-labels.gz")
        get_file(TEST_FEATURES_URL, self.path, "test-features.gz")
        get_file(TEST_LABELS_URL, self.path, "test-labels.gz")

    def _extract(self, **kwargs):
        self.training_set.make_dirs()
        self.test_set.make_dirs()

        ungzip(
            os.path.join(self.path, "train-features.gz"),
            os.path.join(self.training_set.path, "train-features.idx")
        )

        ungzip(
            os.path.join(self.path, "train-labels.gz"),
            os.path.join(self.training_set.path, "train-labels.idx")
        )

        ungzip(
            os.path.join(self.path, "test-features.gz"),
            os.path.join(self.test_set.path, "test-features.idx")
        )

        ungzip(
            os.path.join(self.path, "test-labels.gz"),
            os.path.join(self.test_set.path, "test-labels.idx")
        )


    def _remove_compressed(self, **kwargs):
        # remove the compressed files
        os.path.join(self.path, "train-features.gz") |> os.remove
        os.path.join(self.path, "train-labels.gz") |> os.remove
        os.path.join(self.path, "test-features.gz") |> os.remove
        os.path.join(self.path, "test-labels.gz") |> os.remove

    def _process(self, dims="28x28", format="jpg", **kwargs):
        from idx2numpy import convert_from_file

        dims = dims.split('x')
        dims = tuple(map(int, dims))

        print("Image dims: {}, format: {}".format(dims, format))

        print("processing training-set")
        arrays_to_images(
            path = self.training_set.path,
            images = os.path.join(self.training_set.path, "train-features.idx") |> convert_from_file,
            labels = os.path.join(self.training_set.path, "train-labels.idx") |> convert_from_file,
            dims = dims,
            format = format
        )

        print("processing test-set")
        arrays_to_images(
            path = self.test_set.path,
            images = os.path.join(self.test_set.path, "test-features.idx") |> convert_from_file,
            labels = os.path.join(self.test_set.path, "test-labels.idx") |> convert_from_file,
            dims = dims,
            format = format
        )


    def _remove_raw(self, **kwargs):
        os.path.join(self.training_set.path, "train-features.idx") |> os.remove
        os.path.join(self.training_set.path, "train-labels.idx") |> os.remove
        os.path.join(self.test_set.path, "test-features.idx") |> os.remove
        os.path.join(self.test_set.path, "test-labels.idx") |> os.remove


class MNISTTrainingSet(TrainingSet):

      def __init__(self, *args, **kwargs):
          super(MNISTTrainingSet, self).__init__(*args, **kwargs)

          # self.path

      def dataframe(self):
          # code

          return df

      def arrays(self):
          # code

          return features, labels

      def random_batch_dataframe_generator(self, batch_size):
          # code

          yield df

      def random_batch_arrays_generator(self, batch_size):
          # code

          yield features, labels

class MNISTTestSet(TestSet):

      def __init__(self, *args, **kwargs):
          super(MNISTTestSet, self).__init__(*args, **kwargs)

          # self.path

      def dataframe(self):
          # code

          return df

      def arrays(self):
          # code

          return features, labels

      def random_batch_dataframe_generator(self, batch_size):
          # code

          yield df

      def random_batch_arrays_generator(self, batch_size):
          # code

          yield features, labels
