import os
from platform import python_version
from dataget import get_path
from dataget.dataset import DataSet
import platform


def load_datasets(DATASETS, module_root, datasets_path):
    if not os.path.exists(datasets_path):
        return

    datasets = (
        os.listdir(datasets_path)
        |> filter$(.endswith(".py"))
        |> filter$((x) -> not x.startswith("_"))
        |> map$(.replace(".py", ""))
    )

    for dataset in datasets:
        module_name = dataset.replace("-", "_") |> "{}.{}".format$(module_root)
        filename = "{}.py".format(dataset) |> os.path.join$(datasets_path)

        load_module(module_name, filename)




def load_custom_datasets(DATASETS):
    splitter = "/" if not platform.system() == "Windows" else "\\"

    datasets_path = (
        __file__
        |> .split(splitter)
        |> .[:-1] #get all but the last
        |> splitter.join
        |> os.path.join$(?, "datasets")
    )

    load_datasets(DATASETS, "datasets", datasets_path)


def load_plugin_datasets(DATASETS):
    datasets_path = os.environ.get("DATAGET_HOME", None) if os.environ.get("DATAGET_HOME", None) else  os.path.join("~", ".dataget") |> os.path.expanduser
    datasets_path = os.path.join(datasets_path, "datasets")

    load_datasets(DATASETS, "datasets", datasets_path)


def load_module(module_name, file_path):
    if python_version() >= "3.5":
        import importlib.util
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

    elif python_version() >= "3":
        from importlib.machinery import SourceFileLoader
        module = SourceFileLoader(module_name, file_path).load_module()

    else:
        import imp
        module = imp.load_source(module_name, file_path)

    return module
