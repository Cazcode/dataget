import os
import shutil
from abc import ABCMeta
from abc import abstractmethod
from abc import abstractproperty


class DataSet(object):
    __metaclass__ = ABCMeta

    def __init__(self, name, home_path):
        self.name = name
        self.path = os.path.join(home_path, self.name)
        self.training_set = self.training_set_class(self, "training-set")
        self.test_set = self.test_set_class(self, "test-set")


    def make_dirs(self):
        if os.path.exists(self.path):
            os.makedirs(self.path)

        self.training_set.make_dirs()
        self.test_set.make_dirs()


    def get(self, clear=False, remove_compressed=True, process=True, remove_raw=True, **kwargs):
        # clear
        if clear:
            self.clear()

        # return if path exists, dataset downloaded already, else create path
        if not self.is_empty():
            return self

        # get data
        self.download(**kwargs).extract(**kwargs)

        # clean
        if remove_compressed:
            self.remove_compressed(**kwargs)

        # process
        if process:
            self.process(**kwargs)

            if remove_raw:
                self.remove_raw()

        return self


    def download(self, clear=False, **kwargs):
        print("===DOWNLOAD===")

        # clear
        if clear:
            self.clear()

        if not self.is_empty():
            return self

        self.make_dirs()

        self._download(**kwargs)

        print("")

        return self

    def extract(self, **kwargs):
        print("===EXTRACT===")

        self._extract(**kwargs)

        print("")

        return self

    def remove_compressed(self, **kwargs):
        print("===RM-COMPRESSED===")

        self._remove_compressed(**kwargs)

        print("")

        return self

    def process(self, **kwargs):
        print("===PROCESS===")

        self._process(**kwargs)

        print("")

        return self

    def remove_raw(self, **kwargs):
        print("===RM-RAW===")

        self._remove_raw(**kwargs)

        print("")

        return self


    def clear(self):

        if os.path.exists(self.path):
            shutil.rmtree(self.path)

        return self

    def is_empty(self):
        if not os.path.exists(self.path):
            return True
        else:
            return not os.listdir(self.path)


    @abstractproperty
    def training_set_class(self):
        pass

    @abstractproperty
    def test_set_class(self):
        pass

    @abstractproperty
    def help(self):
        pass

    @abstractmethod
    def _download(self):
        pass

    @abstractmethod
    def _extract(self):
        pass


    def _remove_compressed(self):
        print("removing compressed files")

        for file in os.listdir(self.path):

            file = os.path.join(self.path, file)

            if not os.path.isdir(file):
                os.remove(file)

    @abstractmethod
    def _process(self):
        pass

    @abstractmethod
    def _remove_raw(self):
        pass

    @abstractmethod
    def reqs(self, **kwargs):
        pass


class SubSet(object):
    __metaclass__ = ABCMeta

    def __init__(self, dataset, name):
        self.dataset = dataset
        self.path = os.path.join(dataset.path, name)

    def make_dirs(self):
        if not os.path.exists(self.path):
            os.makedirs(self.path)

    @abstractmethod
    def dataframe(self):
        pass

    @abstractmethod
    def arrays(self):
        pass

    @abstractmethod
    def random_batch_dataframe_generator(self, batch_size):
        pass

    @abstractmethod
    def random_batch_arrays_generator(self, batch_size):
        pass
