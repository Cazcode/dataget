import os
from .utils import upper_to_dashed

DATASETS = {}

def register_dataset(cls):

    name = upper_to_dashed(cls.__name__)
    DATASETS.update({name: cls})

    return cls

def get_path(path=None, global_=False, path_root=None):
    if path:
        return path

    elif global_ or path_root:
        path = path_root if path_root else os.environ.get("DATAGET_HOME", None) if os.environ.get("DATAGET_HOME", None) else  os.path.join("~", ".dataget") |> os.path.expanduser
        path = os.path.join(path, "data")

    elif os.environ.get("DATAGET_HOME", None):
        path = os.environ.get("DATAGET_HOME") |> os.path.join$(?, "data")
    else:
        path = os.path.join(os.getcwd(), ".dataget", "data")

    path = os.path.realpath(path)

    return path

def data(dataset_name, path=None, global_=False, path_root=None, **kwargs):

    path = get_path(path=path, global_=global_, path_root=path_root)

    dataset_class = DATASETS.get(dataset_name, None)
    dataset = dataset_class(dataset_name, path, **kwargs)

    if not dataset:
        raise Exception("Dataset {} does not exist".format(dataset_name))

    return dataset


def ls(available=False, path=None, global_=False, path_root=None):

    if available:
        [ print(s) for s in DATASETS.keys() ]

    else:
        path = get_path(path=path, global_=global_, path_root=path_root)

        if not os.path.exists(path):
            return

        [ print(s) for s in os.listdir(path) if os.path.join(path, s) |> os.path.isdir ]
